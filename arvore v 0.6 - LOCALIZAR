package arvoreAVL;

import arvoreAVL.No;

public class arvore {
	public No raiz;
	
	public arvore() { 
		//Iniciar
		raiz = null;
	}
	
	private int altura(No y){
		if(y == null) {
			return 0;
		} else {
			return y.altura;
		}
	}
	
	int maior(int a, int b){
		if(a > b) {
			return a;
		} else {
			return b;
		}
	}

	public No rotacionarParaEsquerda(No y) {
		No aux = y.direita;  //Filho da direita
		
		//Rotacionar
		y.direita = aux.esquerda;
		aux.esquerda = y;
		

		//Altura
		y.altura = maior(altura(y.esquerda),altura(y.direita))+1;
		aux.altura = maior(altura(aux.esquerda),altura(aux.direita))+1;
		return aux;
	}
	
	public No rotacionarParaDireita(No y) {
		No aux = y.esquerda;  //Filho da esquerda
		
		//Rotacionar
		y.esquerda = aux.direita;
		aux.direita = y;
		
		//Altura
		y.altura = maior(altura(y.esquerda),altura(y.direita))+1;
		aux.altura = maior(altura(aux.esquerda),altura(aux.direita))+1;
		
		return aux;
	}
	
	int fatorDeBalanceamento(No y){
		if(y == null) {
			return 0;
		}
		return altura(y.direita) - altura(y.esquerda); 
	}
	
	public No inserir(int x, No y) {

		if(y == null) {
			return (new No(x));
		}
		if(x < y.valor) {		
			y.esquerda = inserir(x,y.esquerda);
		} else if(x > y.valor){
			y.direita = inserir(x,y.direita);
		} else { //Caso seja igual , nada acontece
			
		}
		
		int fb = fatorDeBalanceamento(y);
				
		if(fb < -1 && x < y.esquerda.valor) {
			return rotacionarParaDireita(y);
		} else if(fb > 1 && x > y.direita.valor){
			return rotacionarParaEsquerda(y);
		} else if(fb < -1 && x > y.esquerda.valor) {  //Dupla a Direita
			y.esquerda = rotacionarParaEsquerda(y.esquerda);
			return rotacionarParaDireita(y);
		} else if(fb > 1 && x < y.direita.valor) {	//Dupla a Esquerda
			y.direita = rotacionarParaDireita(y.direita);
			return rotacionarParaEsquerda(y);
		}
		
		y.altura = maior(altura(y.esquerda),altura(y.direita)) + 1;
		
		return y;
	}

	
	public void encontraMenor(No y){
	    if(y.esquerda == null)
	    	System.out.println("Menor valor: " + y.valor);
	    else
	    	encontraMenor(y.esquerda);
	}
	public void encontraMaior(No y){
	    if(y.direita == null)
	    	System.out.println("Maior valor: " + y.valor);
	    else
	    	encontraMaior(y.direita);
	}
	
    public void imprimir() {
    	int fb = fatorDeBalanceamento(raiz);
        System.out.println(raiz.valor + "(raiz FB: " + fb + ")");
        imprimeNos(raiz, " ");
    }

    public void imprimeNos(No y,String espaçamento) {
    	int fb;
        if(y.direita != null) {
        	fb = fatorDeBalanceamento(y.direita); 
            System.out.println("  "+ espaçamento + y.direita.valor + "   (pai: " + y.valor + " - FB : " + fb + ")");
            imprimeNos(y.direita, espaçamento + "\t");
        }
        if(y.esquerda != null) {
        	fb = fatorDeBalanceamento(y.esquerda);
            System.out.println("  " + espaçamento + y.esquerda.valor + "   (pai: " + y.valor + " - FB: " + fb + ")");
            imprimeNos(y.esquerda, espaçamento + "\t");
        }
    }
    
	public No identificaPai(int x, No y){
		No pai = null;
		
		if(y != null) {
			while(y.valor != x){ 
				pai = y;
				if(y.valor > x)
					y = y.esquerda;
	    		else
	    			y = y.direita;
			}	
	    	return pai;
		}
		return null;
	}
    
	public void localiza(int x, No y) {
		if(y != null) {
			if(x < y.valor) {		
				localiza(x,y.esquerda);
			} else if (x > y.valor){
				localiza(x,y.direita);
			} else { //Caso seja igual , nada acontece
				int fb = fatorDeBalanceamento(y);
				System.out.println("No: " + y.valor + " (FB: " + fb + ")");
			}
		}
		else
    		System.out.println("Elemento não encontrado.");
	}
	
    public void find(int x, No y){
    	No aux = y;
		while(y.valor != x){
        	if(y.valor > x) 
        		y = y.esquerda;
        	else 
        		y = y.direita;
        }
		No pai = identificaPai(x,aux);
		int fb = fatorDeBalanceamento(y);
		fb = fatorDeBalanceamento(pai);
		System.out.println("No: " + y.valor + " (FB: " + fb + ")");
	    System.out.println("\tPai: " + pai.valor + " (FB: " + fb + ")");    
	    if(y.direita != null) {
	    	fb = fatorDeBalanceamento(y.direita); 
	        System.out.println("\tFilho a Direita:  " + y.direita.valor + "   (pai: " + y.valor + " - FB: " + fb + ")");
	    }
        if(y.esquerda != null) {
        	fb = fatorDeBalanceamento(y.esquerda);
        	System.out.println("\tFilho a Esquerda: " + y.esquerda.valor + "   (pai: " + y.valor + " - FB: " + fb + ")");
        }
        /*
		else
    		System.out.println("Elemento não encontrado.");   // No match
    	*/	
	}	
    
    void inOrdem(No y){
    	if(y != null) {
    		inOrdem(y.esquerda);
    		System.out.print(y.valor + "(" + fatorDeBalanceamento(y) + ") ");
    		inOrdem(y.direita);
    	}
    }
    void preOrdem(No y){
    	if(y != null) {
    		System.out.println(y.valor+"(" + fatorDeBalanceamento(y)+ ")");
    		preOrdem(y.esquerda);
    		preOrdem(y.direita);
    	}
    }
    void posOrdem(No y){
    	if(y != null) {
    		posOrdem(y.esquerda);
    		posOrdem(y.direita);
    		System.out.println(y.valor+"(" + fatorDeBalanceamento(y)+ ")");
    	}
    }
    		
}
